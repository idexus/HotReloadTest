//
// <auto-generated> Sharp.UI.Generator.Extensions.SharpBuilder
//

#nullable enable
#pragma warning disable CS8601


namespace HotReloadTestApp
{
    using Sharp.UI.Internal;
    using Sharp.UI;
    
    public static partial class MyViewModelExtension
    {
        public static T Counter<T>(this T self,
            int counter)
            where T : HotReloadTestApp.MyViewModel
        {
            self.SetValueOrAddSetter(HotReloadTestApp.MyViewModel.CounterProperty, counter);
            return self;
        }
        
        public static T Counter<T>(this T self,
            System.Func<ValueBuilder<int>, ValueBuilder<int>> buildValue)
            where T : HotReloadTestApp.MyViewModel
        {
            var builder = buildValue(new ValueBuilder<int>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(HotReloadTestApp.MyViewModel.CounterProperty, builder.GetValue());
            return self;
        }
        
        public static T Counter<T>(this T self,
            System.Func<BindingBuilder<int>, BindingBuilder<int>> buildBinding)
            where T : HotReloadTestApp.MyViewModel
        {
            var builder = buildBinding(new BindingBuilder<int>(self, HotReloadTestApp.MyViewModel.CounterProperty));
            builder.BindProperty();
            return self;
        }
        
        public static T SliderValue<T>(this T self,
            double sliderValue)
            where T : HotReloadTestApp.MyViewModel
        {
            self.SetValueOrAddSetter(HotReloadTestApp.MyViewModel.SliderValueProperty, sliderValue);
            return self;
        }
        
        public static T SliderValue<T>(this T self,
            System.Func<ValueBuilder<double>, ValueBuilder<double>> buildValue)
            where T : HotReloadTestApp.MyViewModel
        {
            var builder = buildValue(new ValueBuilder<double>());
            if (builder.ValueIsSet()) self.SetValueOrAddSetter(HotReloadTestApp.MyViewModel.SliderValueProperty, builder.GetValue());
            return self;
        }
        
        public static T SliderValue<T>(this T self,
            System.Func<BindingBuilder<double>, BindingBuilder<double>> buildBinding)
            where T : HotReloadTestApp.MyViewModel
        {
            var builder = buildBinding(new BindingBuilder<double>(self, HotReloadTestApp.MyViewModel.SliderValueProperty));
            builder.BindProperty();
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
