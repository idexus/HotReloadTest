//
// <auto-generated>
//

#pragma warning disable CS8669


namespace TestPackage
{
    using Sharp.UI;

    public static class EditContainerGeneratedSharpObjectExtension
    {
        public static T Name<T>(this T obj,
            string name)
            where T : TestPackage.EditContainer
        {
            var mauiObject = MauiWrapper.Value<TestPackage.EditContainer>(obj);
            mauiObject.SetValue(TestPackage.EditContainer.NameProperty, (string)name);
            return obj;
        }
        
        public static T Name<T>(this T obj,
            System.Func<ValueBuilder<string>, ValueBuilder<string>> buildValue)
            where T : TestPackage.EditContainer
        {
            var mauiObject = MauiWrapper.Value<TestPackage.EditContainer>(obj);
            var builder = buildValue(new ValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.SetValue(TestPackage.EditContainer.NameProperty, builder.GetValue());
            return obj;
        }
        
        public static T Name<T>(this T obj,
            System.Func<LazyValueBuilder<string>, LazyValueBuilder<string>> buildValue)
            where T : TestPackage.EditContainer
        {
            var mauiObject = MauiWrapper.Value<TestPackage.EditContainer>(obj);
            var builder = buildValue(new LazyValueBuilder<string>());
            if (builder.ValueIsSet()) mauiObject.SetValue(TestPackage.EditContainer.NameProperty, builder.GetValue());
            return obj;
        }
        
        public static T Name<T>(this T obj,
            System.Func<BindingBuilder<string>, BindingBuilder<string>> buildBinding)
            where T : TestPackage.EditContainer
        {
            var mauiObject = MauiWrapper.Value<TestPackage.EditContainer>(obj);
            var builder = buildBinding(new BindingBuilder<string>(mauiObject, TestPackage.EditContainer.NameProperty));
            builder.BindProperty();
            return obj;
        }
        
        public static T EditEntry<T>(this T obj,
            Sharp.UI.Entry editEntry)
            where T : TestPackage.EditContainer
        {
            var mauiObject = MauiWrapper.Value<TestPackage.EditContainer>(obj);
            mauiObject.SetValue(TestPackage.EditContainer.EditEntryProperty, (Sharp.UI.Entry)editEntry);
            return obj;
        }
        
        public static T EditEntry<T>(this T obj,
            System.Func<ValueBuilder<Sharp.UI.Entry>, ValueBuilder<Sharp.UI.Entry>> buildValue)
            where T : TestPackage.EditContainer
        {
            var mauiObject = MauiWrapper.Value<TestPackage.EditContainer>(obj);
            var builder = buildValue(new ValueBuilder<Sharp.UI.Entry>());
            if (builder.ValueIsSet()) mauiObject.SetValue(TestPackage.EditContainer.EditEntryProperty, builder.GetValue());
            return obj;
        }
        
        public static T EditEntry<T>(this T obj,
            System.Func<LazyValueBuilder<Sharp.UI.Entry>, LazyValueBuilder<Sharp.UI.Entry>> buildValue)
            where T : TestPackage.EditContainer
        {
            var mauiObject = MauiWrapper.Value<TestPackage.EditContainer>(obj);
            var builder = buildValue(new LazyValueBuilder<Sharp.UI.Entry>());
            if (builder.ValueIsSet()) mauiObject.SetValue(TestPackage.EditContainer.EditEntryProperty, builder.GetValue());
            return obj;
        }
        
        public static T EditEntry<T>(this T obj,
            System.Func<BindingBuilder<Sharp.UI.Entry>, BindingBuilder<Sharp.UI.Entry>> buildBinding)
            where T : TestPackage.EditContainer
        {
            var mauiObject = MauiWrapper.Value<TestPackage.EditContainer>(obj);
            var builder = buildBinding(new BindingBuilder<Sharp.UI.Entry>(mauiObject, TestPackage.EditContainer.EditEntryProperty));
            builder.BindProperty();
            return obj;
        }
        
    }
}


#pragma warning restore CS8669
